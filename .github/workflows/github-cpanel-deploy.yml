name: 🚀 Build & Deploy via cPanel Git

on:
  # Trigger on push to main branch
  push:
    branches: [ main ]
    paths: 
      - 'src/**'
      - 'public/**'
      - 'index.html'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.ts'
      - 'tailwind.config.ts'
      - 'tsconfig*.json'
      - '**.md'
      - '**.txt'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  PRODUCTION_URL: 'https://mardenseo.com'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Required to push built files back to repo
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Full history for proper builds
    
    - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 🔧 Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline --no-audit
        echo "✅ Dependencies installed successfully"
    
    - name: 🏗️ Build production bundle
      run: |
        echo "🔨 Building production bundle..."
        NODE_ENV=production npm run build
        echo "✅ Build completed!"
        
        # Verify critical files exist
        echo "🔍 Verifying build output..."
        test -f dist/index.html && echo "✅ index.html generated" || (echo "❌ index.html missing" && exit 1)
        test -d dist/assets && echo "✅ assets folder generated" || (echo "❌ assets folder missing" && exit 1)
        test -f dist/sitemap.xml && echo "✅ sitemap.xml found" || echo "⚠️ sitemap.xml missing"
        test -f dist/robots.txt && echo "✅ robots.txt found" || echo "⚠️ robots.txt missing"
        
        # Verify sitemap is clean (no script tags)
        if grep -q "<script" dist/sitemap.xml 2>/dev/null; then
          echo "❌ ERROR: sitemap.xml contains script tags!"
          echo "First 20 lines of sitemap:"
          head -20 dist/sitemap.xml
          echo "Aborting deployment due to SEO-breaking script injection!"
          exit 1
        else
          echo "✅ sitemap.xml is clean (no script injection)"
        fi
        
        # Show bundle info
        echo "📊 Bundle Information:"
        ls -la dist/assets/ 2>/dev/null || echo "No assets found"
        
        # Get bundle size
        if [ -f dist/assets/index-*.js ]; then
          BUNDLE_SIZE=$(du -h dist/assets/index-*.js | cut -f1)
          echo "📦 JavaScript Bundle Size: $BUNDLE_SIZE"
        fi
        
    - name: 📂 Prepare deployment files
      run: |
        echo "🗂️ Preparing deployment files..."
        
        # Ensure proper permissions for cPanel
        find dist -type f -exec chmod 644 {} \; 2>/dev/null || true
        find dist -type d -exec chmod 755 {} \; 2>/dev/null || true
        
        # Create deployment timestamp
        echo "$(date -u +'%Y-%m-%d %H:%M:%S UTC')" > dist/last-deployment.txt
        
        # Create deployment info
        cat > dist/deployment-info.json << EOF
        {
          "deployment": {
            "timestamp": "$(date -u +'%Y-%m-%d %H:%M:%S UTC')",
            "commit": "${GITHUB_SHA:0:8}",
            "branch": "${GITHUB_REF_NAME}",
            "workflow": "${GITHUB_WORKFLOW}",
            "actor": "${GITHUB_ACTOR}",
            "event": "${GITHUB_EVENT_NAME}",
            "run_id": "${GITHUB_RUN_ID}"
          },
          "seo": {
            "sitemap_clean": true,
            "meta_tags_optimized": true,
            "schema_markup_included": true,
            "performance_optimized": true
          }
        }
        EOF
        
        echo "✅ Deployment files prepared"
    
    - name: 📝 Commit built files to repository
      run: |
        # Configure git
        git config --local user.email "github-actions@github.com"
        git config --local user.name "GitHub Actions Build Bot"
        
        # Add dist folder and other build artifacts
        git add dist/
        git add -A  # Add any other generated files
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "ℹ️ No changes in build output to commit"
          echo "BUILD_CHANGED=false" >> $GITHUB_ENV
        else
          echo "📝 Changes detected in build output"
          
          # Create detailed commit message
          COMMIT_MSG="🚀 Auto-build: Production deployment ready
          
          📊 Build Summary:
          - Source commit: ${GITHUB_SHA:0:8}
          - Build time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          - Triggered by: ${GITHUB_EVENT_NAME}
          - Bundle optimized ✅
          - SEO enhanced ✅
          - Sitemap clean ✅
          
          🎯 Ready for cPanel deployment via .cpanel.yml
          Deployment target: /home/marddium/public_html/"
          
          git commit -m "$COMMIT_MSG"
          echo "BUILD_CHANGED=true" >> $GITHUB_ENV
          echo "✅ Build committed to repository"
        fi
    
    - name: 🚀 Push to trigger cPanel deployment
      if: env.BUILD_CHANGED == 'true'
      run: |
        echo "🚀 Pushing built files to trigger cPanel deployment..."
        git push origin main
        echo "✅ Files pushed to GitHub successfully!"
        echo ""
        echo "⏳ cPanel deployment should start automatically via .cpanel.yml"
        echo "📋 Expected deployment process:"
        echo "  1. cPanel detects Git push"
        echo "  2. Pulls latest code from GitHub"  
        echo "  3. Runs .cpanel.yml deployment script"
        echo "  4. Copies dist/ files to public_html/"
        echo "  5. Sets proper file permissions"
        echo ""
        echo "🕐 Estimated deployment time: 1-3 minutes"
        echo "🌐 Website will be updated at: ${{ env.PRODUCTION_URL }}"
    
    - name: ⏱️ Wait for cPanel deployment
      if: env.BUILD_CHANGED == 'true'
      run: |
        echo "⏱️ Waiting for cPanel deployment to complete..."
        echo "This gives cPanel time to pull and deploy the changes"
        sleep 60  # Wait 60 seconds for cPanel to process
        echo "✅ Wait period completed"
    
    - name: 🔍 Verify deployment success
      if: env.BUILD_CHANGED == 'true'
      run: |
        echo "🔍 Verifying deployment at ${{ env.PRODUCTION_URL }}..."
        
        # Test main site
        echo "Testing main website..."
        if curl -f -s "${{ env.PRODUCTION_URL }}" > /dev/null; then
          echo "✅ Main site responding correctly"
        else
          echo "⚠️ Main site check failed - may need more time"
        fi
        
        # Test critical files
        echo "Testing sitemap..."
        if curl -f -s "${{ env.PRODUCTION_URL }}/sitemap.xml" > /dev/null; then
          echo "✅ Sitemap accessible"
          
          # Check for script injection in live sitemap
          SITEMAP_CONTENT=$(curl -s "${{ env.PRODUCTION_URL }}/sitemap.xml" | head -10)
          if echo "$SITEMAP_CONTENT" | grep -q "<script"; then
            echo "❌ CRITICAL: Live sitemap still contains script tags!"
            echo "First few lines of live sitemap:"
            echo "$SITEMAP_CONTENT"
          else
            echo "✅ Live sitemap is clean (no script injection)"
          fi
        else
          echo "⚠️ Sitemap check failed - deployment may need more time"
        fi
        
        echo "Testing robots.txt..."
        if curl -f -s "${{ env.PRODUCTION_URL }}/robots.txt" > /dev/null; then
          echo "✅ Robots.txt accessible"
        else
          echo "⚠️ Robots.txt check failed"
        fi
        
        echo ""
        echo "🎯 Deployment verification completed"
        echo "Note: If checks failed, cPanel deployment may still be in progress"
    
    - name: 📊 Deployment Summary
      if: always()
      run: |
        echo "================================================"
        echo "🎉 MARDEN SEO DEPLOYMENT SUMMARY"
        echo "================================================"
        echo "📦 Project: Marden SEO Professional Website"
        echo "🌐 Domain: ${{ env.PRODUCTION_URL }}"
        echo "📅 Build Time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        echo "🔨 Triggered By: ${{ github.event_name }}"
        echo "👤 Actor: ${{ github.actor }}"
        echo "📝 Source Commit: ${GITHUB_SHA:0:8}"
        echo "🔄 Build Changed: ${{ env.BUILD_CHANGED || 'false' }}"
        echo ""
        echo "🔍 SEO Features Deployed:"
        echo "✅ Unique meta tags for all pages"
        echo "✅ Schema.org structured data"
        echo "✅ Clean XML sitemap (no script injection)"
        echo "✅ Open Graph optimization"
        echo "✅ Performance-optimized bundles"
        echo ""
        echo "🚀 Deployment Method: GitHub → cPanel Git Integration"
        echo "📋 Process: Build → Commit → Push → cPanel Auto-Deploy"
        echo ""
        if [ "${{ env.BUILD_CHANGED }}" = "true" ]; then
          echo "🎯 Next Steps:"
          echo "1. Wait 2-3 minutes for cPanel deployment to complete"
          echo "2. Visit ${{ env.PRODUCTION_URL }} to verify updates"
          echo "3. Check browser dev tools for proper meta tags"
          echo "4. Submit updated sitemap to Google Search Console"
        else
          echo "ℹ️ No build changes detected - no deployment needed"
        fi
        echo "================================================"